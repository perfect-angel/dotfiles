#+TITLE: ANGEL CAMPBELL'S WONDERFUL HORRIBLE EMACS CONFIG
#+AUTHOR: Angel D. Campbell
#+DATE: 2024-12-26
#+tags: emacs

A literate configuration file for my emacs and system.

#+begin_src emacs-lisp :exports none
  ;; config.el -- my emacs configuration. -*-lexical-binding: t-*-
  ;;
  ;; ‚ö†warningÔ∏è‚ö†: this is not a good endorsement of me as a serious person.
  ;;
  ;; ¬© 2024 angel d. campbell
  ;; licensed under a creative commons attribution 4.0 international license.
  ;; see http://creativecommons.org/licenses/by/4.0/
  ;;
  ;; author: angel d. campbell <https://sr.ht/~perfect-angel/>
  ;; maintainer: angel d. campbell
  ;; created: december  26, 2024
  ;; last edited: Jan 28, 2025
  ;;
  ;; this file is not part of gnu emacs.
  ;;
  ;; do not edit this file, edit the config.org file which tangles
  ;; into this file
#+end_src

#+begin_center
				YOU ARE *LOVED*
			 YOU ARE *WORTHY* OF THAT LOVE
			    YOU ARE *NOT* IN TROUBLE
				 DRINK *WATER*
#+end_center


* Package

add melpa nongnu and elpa; initialize use-package

#+begin_src elisp
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
	     '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
(package-initialize)

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

use this package to make sure my =PATH= is set correctly

#+begin_src emacs-lisp
  (use-package exec-path-from-shell ;; set path to shellpath
    :config
    (exec-path-from-shell-initialize))
#+end_src

Pretty stuff, themes and font

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (context-menu-mode 1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (setq visible-bell 1
  	confirm-kill-emacs 'yes-or-no-p
  	ring-bell-function 'ignore
  	frame-inhibit-implied-resize t))



<<<<<<< HEAD:archive/config.org
  (load-theme 'tango 1)
=======
  (load-theme 'modus-vivendi 1)
>>>>>>> 7f84028 (things):config.org
  (set-frame-font "FiraCode Nerd Font 20" nil t)
#+end_src

Icons 
*Note:* Install everything with the function, =all-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

modeline, my HUD

#+begin_src emacs-lisp
  (use-package mood-line
    ;; Enable mood-line
    :config
    (mood-line-mode)
    :custom
    (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src

pretty stuff

#+begin_src elisp
  (use-package emojify)
  (use-package nerd-icons)
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Programming Hooks
#+begin_src emacs-lisp :tangle yes
(use-package emacs
    :hook ((prog-mode . column-number-mode) ; columns
  	 (prog-mode . flymake-mode) ; checker
  	 ((prog-mode text-mode) . hs-minor-mode) ; folding
  	 ((prog-mode text-mode) . visual-line-mode) ; word wrap
  	 (prog-mode . auto-fill-mode))) ; auto word wrap
#+end_src
** Settings

#+begin_src emacs-lisp :tangle yes :results none
  (use-package emacs
    :config
    (setq enable-recursive-minibuffers t ; i forgot why i do this
  	tramp-default-method "ssh" ; faster tramp with ssh
  	visual-fill-column-center-text t
  	visual-fill-column-width 80)
    (setq-default fill-column 80) ; tty geezer
    (when (eq system-type 'darwin) ; mac specific settings
      (global-set-key [kp-delete] 'delete-char)) ; fix mac delete
    (electric-pair-mode 1) ; auto-pair
    (electric-indent-mode 1) ; auto-indent
    (fset 'yes-or-no-p 'y-or-n-p) ; 2 lazy 2 type yes
    (recentf-mode 1) ; what was i doing?
    (show-paren-mode 1) ; i believe in symmetry
    (global-eldoc-mode 1)) ; global documentation
#+end_src

* Programming üíª

** Discovery
#+begin_src emacs-lisp :tangle yes :results none
  (use-package which-key
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay 0.5)
    :config
    (which-key-mode 1))
  (use-package eldoc-box)
#+end_src

** NavigationÔ∏è
#+begin_src emacs-lisp :tangle yes :results none
  (use-package avy)
  (use-package counsel
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode 1))
#+end_src

** Completion
#+begin_src emacs-lisp :tangle yes :results none
  (use-package company
    :config
    (global-company-mode 1)) ;; replace with complete?
#+end_src

** Lang
#+begin_src emacs-lisp :tangle yes :results none
  (use-package handlebars-mode)
  (use-package geiser-guile)
  (use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'html-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'html-ts-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.

  (use-package rust-ts-mode
    :mode ("\\.rs\\'" . rust-ts-mode))
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
  (use-package rmsbolt)
  (use-package cider)
#+end_src

** LSP
#+begin_src emacs-lisp :tangle yes :results none
  (use-package eglot
    :hook ((js-ts-mode  . eglot-ensure)
	   (typescript-ts-mode  . eglot-ensure)
	   (rust-ts-mode  . eglot-ensure))
    :config
    (add-to-list 'eglot-server-programs
		 '(handlebars-mode "ember-language-server")))
#+end_src

* Org üìÜ
** Settings

make a few things prettier

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-pretty-entities t
          org-hide-emphasis-markers t
          org-auto-align-tags nil
          org-tags-column 0
          org-ellipsis "‚§µ"                ; ‚Ä¶, ‚û°, ‚ö°, ‚ñº, ‚Ü¥, , ‚àû, ‚¨é, ‚§∑, ‚§µ
          org-catch-invisible-edits 'show-and-error
	  org-image-actual-width  nil
          org-src-fontify-natively t      ; Pretty code blocks
          org-agenda-breadcrumbs-separator " ‚ù± "))
#+end_src

** Appear

#+begin_src emacs-lisp :tangle yes
    (use-package org-appear
      :config
      (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

** Babel

set up my backends for babel code evaluation in org buffers

#+begin_src emacs-lisp 
  (use-package org
    :custom
    (org-babel-clojure-backend 'cider)
    (org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)
       (clojure . t)
       (js . t)
       (ruby . t))))

#+end_src

** Agenda 

set up capture templates, refile target, and agenda files

#+begin_src emacs-lisp
      (use-package org
        :custom
        (org-directory "~/org")
        (org-default-notes-file "refile.org")
        (org-agenda-files '("today.org" "refile.org"))
        (org-capture-templates
         '(("t" "Todo" entry (file "~/org/refile.org") "* TODO %?")
           ("j" "Journal" entry (file+olp+datetree "~/org/journal.org") "* %?"))))
#+end_src

* Tools üî®
** K8s
#+begin_src emacs-lisp :tangle yes :results none
  (use-package kubernetes)
#+end_src

** IRC
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq rcirc-default-nick "perfect_angel" ; i've never even sinned
	  rcirc-track-minor-mode 1
  	rcirc-server-alist
  	'(("irc.libera.chat"
  	   :channels ("#emacs" "##rust" "#guix")
  	   :nick "perfect_angel"
  	   :port 6697
  	   :encryption tls))))
#+end_src

** Web Browser

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq browse-url-browser-function 'xwidget-webkit-browse-url)) ; use xwidget to browse

#+end_src

** Mastodon

** AI
#+begin_src emacs-lisp
  (use-package gptel
    :config
    (setq gptel-backend (gptel-make-ollama "Ollama"
  			:host "localhost:11434"
  			:stream t
  			:models '(deepseek-coder-v2:latest))
  	gptel-default-model 'deepseek-coder-v2:latest
  	gptel-model 'deepseek-coder-v2:latest
  	gptel-default-mode 'org-mode))
#+end_src


*** TODO
* Etc. üîß

Junk drawer...

#+begin_src emacs-lisp :tangle yes :results none
  (use-package savehist
    :config
    (savehist-mode))
  (use-package magit) ; git gud
  (use-package iedit) ; TODO: why do i have this? edit quickfix?
  (use-package lingva)
  (use-package vterm)
  (use-package simple-httpd)
  (use-package yasnippet
    :config
    (setq yasnippet-snippet-dirs '("~/dotfiles/snippets/"))
    (yas-global-mode 1)
    (global-set-key (kbd "C-x C-y") 'company-yasnippet))
  (use-package yasnippet-snippets)

#+end_src

* End

#+begin_center
				     üíúüíúüíú
				      Amen
				     üíúüíúüíú
#+end_center
					

#+property:    header-args:emacs-lisp  :tangle yes
#+property:    header-args    :results none :eval no-export :comments no mkdirp yes
