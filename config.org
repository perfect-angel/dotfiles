#+TITLE: ANGEL CAMPBELL'S WONDERFUL HORRIBLE EMACS CONFIG
#+AUTHOR: Angel D. Campbell
#+DATE: 2024-12-26
#+tags: emacs

* Intro
A literate configuration file for my emacs and system.


#+begin_src emacs-lisp :results none
  ;; config.el -- my emacs configuration. -*-lexical-binding: t-*-
  ;;
  ;; ‚ö†warning‚ö†: this is not a good endorsement of me as a serious person.
  ;;
  ;; ¬© 2024 angel d. campbell
  ;; licensed under a creative commons attribution 4.0 international license.
  ;; see http://creativecommons.org/licenses/by/4.0/
  ;;
  ;; author: angel d. campbell <https://sr.ht/~perfect-angel/>
  ;; maintainer: angel d. campbell
  ;; created: december  26, 2024
  ;; last edited: Jan 28, 2025
  ;;
  ;; this file is not part of gnu emacs.
  ;;
  ;; do not edit this file, edit the config.org file which tangles
  ;; into this file
#+end_src

#+begin_center
YOU ARE *LOVED*
YOU ARE *WORTHY* OF THAT LOVE
YOU ARE *NOT* IN TROUBLE
DRINK *WATER*
#+end_center

* Package Init
 
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Settings

#+begin_src emacs-lisp
  (column-number-mode 1)      ; Column numbers
  (global-auto-revert-mode 1) ; Auto revert changed buffers
  (global-eldoc-mode 1)       ; global documentation
  (menu-bar-mode -1)          ; Disable the menu bar
  (recentf-mode 1)            ; what was i doing?
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fill-column 80)        ; TTY length
  (global-visual-line-mode 1) ; wrap lines

  ;;; Variables:
  (setq user-full-name "Angel Campbell")
  (setq user-mail-address "angel@acidburn.tech")
  (setq-default fill-column 80)                       ; tty width
  (setq auto-save-default nil)                        ; stop creating # auto save files
  (setq custom-file "~/dotfiles/emacs-custom.el")     ; customization
  (setq inhibit-startup-message t) ; no startup message
  (setq make-backup-files nil) ; stop creating ~ backup files
  (setq y-or-n-p-use-read-key t) ; for embark
  (setq use-short-answers t)                ; 2 lazy 2 type yes
  (setq visible-bell t) ; set up the visible bell
  (set-face-attribute 'default nil ; font
  		    :font "NotoMono Nerd Font Mono"
  		    :height 200)
#+end_src

** Apple
#+begin_src emacs-lisp
  (when (eq system-type 'darwin) ; mac specific settings
    (setq mac-command-modifier 'meta)
    (global-set-key [kp-delete] 'delete-char)) ; fix mac delete
#+end_src

* Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") #'undo)
  (bind-key "C-t" 'tab-new)
#+end_src

** Leader ü´°
#+begin_src emacs-lisp
  (bind-key "M-p /" 'consult-ripgrep) ;; M-s r
  (bind-key "M-p a" 'vterm)
  (bind-key "M-p b" 'consult-buffer)
  (bind-key "M-p c" 'org-capture)
  (bind-key "M-p d" #'dired-sidebar-toggle-sidebar)
  (defun me/find-config () (interactive) (find-file "~/dotfiles/config.org"))
  (bind-key "M-p e" 'me/find-config)
  (bind-key "M-p f" 'find-file)
  (bind-key "M-p g" 'magit-status)
  (bind-key "M-p i" 'avy-goto-char-2)  
  (bind-key "M-p p" 'project-find-file)
  (bind-key "M-p M-p" 'project-find-file)
  (bind-key "M-p r" 'recentf)
  (bind-key "M-p s" 'split-window-horizontally)
  (bind-key "M-p v" 'split-window-vertically)
  (bind-key "M-p h" 'hs-toggle-hiding)
#+end_src

* Hooks
#+begin_src emacs-lisp
  ;; prog hooks
  (add-hook 'prog-mode-hook 'electric-indent-mode) ; auto indent
  (add-hook 'prog-mode-hook 'flymake-mode) ; syntax checking
  (add-hook 'prog-mode-hook 'electric-pair-mode) ; auto pairs
  (add-hook 'prog-mode-hook 'hs-minor-mode) ; code folding
  (add-hook 'prog-mode-hook 'display-line-numbers-mode) ; line numbers
  ;; org hooks
  (add-hook 'org-mode-hook 'visual-line-mode) ; org line wrapping
#+end_src

* Discovery
#+begin_src emacs-lisp
  (use-package elisp-demos) ; examples in help
  (use-package marginalia
    :init
    ;; Configure Marginalia
    (customize-set-variable 'marginalia-annotators
                            '(marginalia-annotators-heavy
                              marginalia-annotators-light
                              nil))
    :config
    (marginalia-mode 1))
#+end_src

* Navigation
#+begin_src emacs-lisp
  (which-key-mode)
  (use-package ace-window :bind ("M-o" . ace-window))
  (use-package embark
    :config
    (keymap-global-set "<remap> <describe-bindings>" #'embark-bindings)
    (keymap-global-set "C-." 'embark-act)
    (keymap-global-set "C-;" 'embark-dwim)
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src

* Completion
#+begin_src emacs-lisp
  (setopt completions-detailed t)
  (fido-vertical-mode)
  (use-package corfu
    :custom
    (corfu-cycle t)
    (completion-cycle-threshold 3)
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil)
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))
  (use-package orderless
    :init
    (customize-set-variable 'completion-styles '(orderless basic flex))
    (customize-set-variable 'completion-category-overrides
                            '((file (styles . (partial-completion))))))
#+end_src

* Cosmetic
#+begin_src emacs-lisp :results none
    (load-theme 'modus-vivendi)
    (use-package doom-modeline ; modeline
      :init (doom-modeline-mode 1))
    (use-package breadcrumb
      :init (breadcrumb-mode))
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode)) 
    (use-package all-the-icons) ; Cute icons
#+end_src

* Utility
#+begin_src emacs-lisp :results none
  (use-package exec-path-from-shell ; set path to shellpath
    :config
    (exec-path-from-shell-initialize))
  (use-package savehist ; save command history
    :init
    (savehist-mode))
  (use-package visual-fill-column) ; zen mode
  (use-package vterm)  ; terminal
  (use-package emmet-mode) ; html snippets
  (use-package dired-sidebar) ; file tree
  (use-package spray ; speedreading
    :init
    (setq spray-wpm 500))
  (use-package magit) ; git gud
#+end_src

* Snippets
#+begin_src emacs-lisp :results none
  (use-package yasnippet
    :config
    (setq yasnippet-snippet-dirs '("~/dotfiles/snippets/"))
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+end_src

* Languages
#+begin_src emacs-lisp :results none
  (use-package markdown-mode)
  (use-package kubernetes)
  (use-package geiser-guile)
  (use-package rust-mode)
#+end_src

** Treesitter
#+begin_src emacs-lisp :results none
  (use-package tree-sitter)
  (use-package treesit-auto)
  ;; (treesit-auto-install-all)
  (setq major-mode-remap-alist
        '((yaml-mode . yaml-ts-mode)
  	(bash-mode . bash-ts-mode)
  	(js2-mode . js-ts-mode)
  	(typescript-mode . typescript-ts-mode)
  	(json-mode . json-ts-mode)
  	(elixir-mode . elixir-ts-mode)
  	(rust-mode . rust-ts-mode)
  	(css-mode . css-ts-mode)
  	(python-mode . python-ts-mode)))
#+end_src

* LSP
#+begin_src emacs-lisp :results none
  (use-package eglot
    :hook ((rust-ts-mode
  	  rust-mode
  	  typescript-ts-mode
  	  javascript-ts-mode
  	  elixir-ts-mode
  	  terraform-ts-mode
  	  terraform-mode) . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(elixir-ts-mode "~/lib/elixir-ls/language_server.sh")))
#+end_src

* Debugging
#+begin_src emacs-lisp :results none
  (use-package dap-mode ;; todo maybe replace with dape
    :config
    (setq dap-gdb-debug-program '("rust-gdb" "-i" "dap"))
    (require 'dap-gdb))
#+end_src

* Org
#+begin_src emacs-lisp :results none
  (use-package org
    :custom
    (org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (clojure . t)
       (python . t)
       (js . t)))
    (org-directory "~/org")
    (org-agenda-files (list org-directory)) 
    (org-refile-targets
     '((org-agenda-files . (:maxlevel . 2))
       (nil . (:maxlevel . 2)))) 
    (org-default-notes-file "refile.org")
    (org-capture-templates
     '(("t" "Todo" entry (file "refile.org") "* TODO %?")
       ("j" "Journal" entry (file+olp+datetree "journal.org") "* %?"))))
  (use-package org-bullets
    :init
    (org-bullets-mode 1))
#+end_src

** Presentations
#+begin_src emacs-lisp :results none
  (defun me/org-present-start ()
    (interactive)
    (visual-fill-column-mode 1)
    (widen)
    (org-narrow-to-element))

  (defun me/org-present-next ()
    (interactive)
    (widen)
    (org-next-visible-heading)
    (org-narrow-to-element))

  (defun me/org-present-previous()
    (interactive)
    (widen)
    (org-previous-visible-heading)
    (org-narrow-to-element))

  (bind-key "C-c p s" #'me/org-present-start 'org-mode-map)
  (bind-key "C-c p n" #'me/org-present-next 'org-mode-map)
  (bind-key "C-c p p" #'me/org-present-previous 'org-mode-map)
#+end_src

* Internet
#+begin_src emacs-lisp :results none
  (setq rcirc-default-nick "perfect_angel" ;; irc
        rcirc-track-minor-mode 1
        rcirc-server-alist
        '(("irc.libera.chat"
    	 :channels ("#emacs" "##rust")
    	 :nick "perfect_angel"
    	 :port 6697
    	 :encryption tls)))

  (use-package elfeed ;; RSS
    :config
    (setq elfeed-feeds
  	'("https://www.404media.co/rss"
  	  "https://news.ycombinator.com/rss")))

  (autoload 'notmuch "notmuch" "notmuch mail" t) ;; email
  (require 'notmuch nil t)

  ; TODO: calendar: org import (ics?)
#+end_src

* Novelty
#+begin_src emacs-lisp :results none
  (keymap-global-set "s-<delete>" ;; navi todo replace
   		   (lambda ()
   		     (interactive)
   		     (play-sound-file "~/dotfiles/listen.wav")))

#+end_src

* Amen
üôè
* TODO 
** set certain packages to lazy to speed up load time
** ement.el matrix client - matrix maybe over
** mastodon.el
** bind <WakeUp>
** emms
** notmuch
** calendar
** https://github.com/hsingko/emacs-obsidian-excalidraw

